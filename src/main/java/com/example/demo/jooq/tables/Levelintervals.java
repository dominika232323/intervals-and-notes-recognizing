/*
 * This file is generated by jOOQ.
 */
package com.example.demo.jooq.tables;


import com.example.demo.jooq.Db;
import com.example.demo.jooq.Keys;
import com.example.demo.jooq.tables.records.LevelintervalsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Levelintervals extends TableImpl<LevelintervalsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>db.LevelIntervals</code>
     */
    public static final Levelintervals LEVELINTERVALS = new Levelintervals();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LevelintervalsRecord> getRecordType() {
        return LevelintervalsRecord.class;
    }

    /**
     * The column <code>db.LevelIntervals.levelID</code>.
     */
    public final TableField<LevelintervalsRecord, Integer> LEVELID = createField(DSL.name("levelID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>db.LevelIntervals.userID</code>.
     */
    public final TableField<LevelintervalsRecord, Integer> USERID = createField(DSL.name("userID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>db.LevelIntervals.name</code>.
     */
    public final TableField<LevelintervalsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>db.LevelIntervals.numberOfRepetitions</code>.
     */
    public final TableField<LevelintervalsRecord, Integer> NUMBEROFREPETITIONS = createField(DSL.name("numberOfRepetitions"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>db.LevelIntervals.up</code>.
     */
    public final TableField<LevelintervalsRecord, Byte> UP = createField(DSL.name("up"), SQLDataType.TINYINT, this, "");

    /**
     * The column <code>db.LevelIntervals.together</code>.
     */
    public final TableField<LevelintervalsRecord, Byte> TOGETHER = createField(DSL.name("together"), SQLDataType.TINYINT, this, "");

    /**
     * The column <code>db.LevelIntervals.down</code>.
     */
    public final TableField<LevelintervalsRecord, Byte> DOWN = createField(DSL.name("down"), SQLDataType.TINYINT, this, "");

    private Levelintervals(Name alias, Table<LevelintervalsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Levelintervals(Name alias, Table<LevelintervalsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>db.LevelIntervals</code> table reference
     */
    public Levelintervals(String alias) {
        this(DSL.name(alias), LEVELINTERVALS);
    }

    /**
     * Create an aliased <code>db.LevelIntervals</code> table reference
     */
    public Levelintervals(Name alias) {
        this(alias, LEVELINTERVALS);
    }

    /**
     * Create a <code>db.LevelIntervals</code> table reference
     */
    public Levelintervals() {
        this(DSL.name("LevelIntervals"), null);
    }

    public <O extends Record> Levelintervals(Table<O> child, ForeignKey<O, LevelintervalsRecord> key) {
        super(child, key, LEVELINTERVALS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB;
    }

    @Override
    public UniqueKey<LevelintervalsRecord> getPrimaryKey() {
        return Keys.KEY_LEVELINTERVALS_PRIMARY;
    }

    @Override
    public List<UniqueKey<LevelintervalsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_LEVELINTERVALS_NAME);
    }

    @Override
    public Levelintervals as(String alias) {
        return new Levelintervals(DSL.name(alias), this);
    }

    @Override
    public Levelintervals as(Name alias) {
        return new Levelintervals(alias, this);
    }

    @Override
    public Levelintervals as(Table<?> alias) {
        return new Levelintervals(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Levelintervals rename(String name) {
        return new Levelintervals(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Levelintervals rename(Name name) {
        return new Levelintervals(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Levelintervals rename(Table<?> name) {
        return new Levelintervals(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, String, Integer, Byte, Byte, Byte> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super Integer, ? super String, ? super Integer, ? super Byte, ? super Byte, ? super Byte, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super Integer, ? super String, ? super Integer, ? super Byte, ? super Byte, ? super Byte, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
