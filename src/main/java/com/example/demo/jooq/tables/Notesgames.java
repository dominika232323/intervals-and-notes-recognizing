/*
 * This file is generated by jOOQ.
 */
package com.example.demo.jooq.tables;


import com.example.demo.jooq.Db;
import com.example.demo.jooq.Indexes;
import com.example.demo.jooq.Keys;
import com.example.demo.jooq.tables.records.NotesgamesRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Notesgames extends TableImpl<NotesgamesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>db.NotesGames</code>
     */
    public static final Notesgames NOTESGAMES = new Notesgames();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotesgamesRecord> getRecordType() {
        return NotesgamesRecord.class;
    }

    /**
     * The column <code>db.NotesGames.notesGameID</code>.
     */
    public final TableField<NotesgamesRecord, Integer> NOTESGAMEID = createField(DSL.name("notesGameID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>db.NotesGames.userID</code>.
     */
    public final TableField<NotesgamesRecord, Integer> USERID = createField(DSL.name("userID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>db.NotesGames.levelNotesID</code>.
     */
    public final TableField<NotesgamesRecord, Integer> LEVELNOTESID = createField(DSL.name("levelNotesID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>db.NotesGames.datePlayed</code>.
     */
    public final TableField<NotesgamesRecord, LocalDate> DATEPLAYED = createField(DSL.name("datePlayed"), SQLDataType.LOCALDATE, this, "");

    private Notesgames(Name alias, Table<NotesgamesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Notesgames(Name alias, Table<NotesgamesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>db.NotesGames</code> table reference
     */
    public Notesgames(String alias) {
        this(DSL.name(alias), NOTESGAMES);
    }

    /**
     * Create an aliased <code>db.NotesGames</code> table reference
     */
    public Notesgames(Name alias) {
        this(alias, NOTESGAMES);
    }

    /**
     * Create a <code>db.NotesGames</code> table reference
     */
    public Notesgames() {
        this(DSL.name("NotesGames"), null);
    }

    public <O extends Record> Notesgames(Table<O> child, ForeignKey<O, NotesgamesRecord> key) {
        super(child, key, NOTESGAMES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.NOTESGAMES_LEVELNOTESID, Indexes.NOTESGAMES_USERID);
    }

    @Override
    public Identity<NotesgamesRecord, Integer> getIdentity() {
        return (Identity<NotesgamesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotesgamesRecord> getPrimaryKey() {
        return Keys.KEY_NOTESGAMES_PRIMARY;
    }

    @Override
    public List<ForeignKey<NotesgamesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NOTESGAMES_IBFK_1, Keys.NOTESGAMES_IBFK_2);
    }

    private transient Users _users;
    private transient Levelnotes _levelnotes;

    /**
     * Get the implicit join path to the <code>db.Users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.NOTESGAMES_IBFK_1);

        return _users;
    }

    /**
     * Get the implicit join path to the <code>db.LevelNotes</code> table.
     */
    public Levelnotes levelnotes() {
        if (_levelnotes == null)
            _levelnotes = new Levelnotes(this, Keys.NOTESGAMES_IBFK_2);

        return _levelnotes;
    }

    @Override
    public Notesgames as(String alias) {
        return new Notesgames(DSL.name(alias), this);
    }

    @Override
    public Notesgames as(Name alias) {
        return new Notesgames(alias, this);
    }

    @Override
    public Notesgames as(Table<?> alias) {
        return new Notesgames(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Notesgames rename(String name) {
        return new Notesgames(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notesgames rename(Name name) {
        return new Notesgames(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notesgames rename(Table<?> name) {
        return new Notesgames(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, LocalDate> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super LocalDate, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super LocalDate, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
