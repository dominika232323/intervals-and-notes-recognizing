/*
 * This file is generated by jOOQ.
 */
package com.example.demo.jooq.tables;


import com.example.demo.jooq.Db;
import com.example.demo.jooq.Keys;
import com.example.demo.jooq.tables.records.AnswersintervalsgameRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Answersintervalsgame extends TableImpl<AnswersintervalsgameRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>db.AnswersIntervalsGame</code>
     */
    public static final Answersintervalsgame ANSWERSINTERVALSGAME = new Answersintervalsgame();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnswersintervalsgameRecord> getRecordType() {
        return AnswersintervalsgameRecord.class;
    }

    /**
     * The column <code>db.AnswersIntervalsGame.answerIntervalsGameID</code>.
     */
    public final TableField<AnswersintervalsgameRecord, Integer> ANSWERINTERVALSGAMEID = createField(DSL.name("answerIntervalsGameID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>db.AnswersIntervalsGame.intervalsGameID</code>.
     */
    public final TableField<AnswersintervalsgameRecord, Integer> INTERVALSGAMEID = createField(DSL.name("intervalsGameID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>db.AnswersIntervalsGame.intervalID</code>.
     */
    public final TableField<AnswersintervalsgameRecord, Integer> INTERVALID = createField(DSL.name("intervalID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>db.AnswersIntervalsGame.intervalOccurrences</code>.
     */
    public final TableField<AnswersintervalsgameRecord, Integer> INTERVALOCCURRENCES = createField(DSL.name("intervalOccurrences"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>db.AnswersIntervalsGame.intervalGuessedCorrectly</code>.
     */
    public final TableField<AnswersintervalsgameRecord, Integer> INTERVALGUESSEDCORRECTLY = createField(DSL.name("intervalGuessedCorrectly"), SQLDataType.INTEGER, this, "");

    private Answersintervalsgame(Name alias, Table<AnswersintervalsgameRecord> aliased) {
        this(alias, aliased, null);
    }

    private Answersintervalsgame(Name alias, Table<AnswersintervalsgameRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>db.AnswersIntervalsGame</code> table reference
     */
    public Answersintervalsgame(String alias) {
        this(DSL.name(alias), ANSWERSINTERVALSGAME);
    }

    /**
     * Create an aliased <code>db.AnswersIntervalsGame</code> table reference
     */
    public Answersintervalsgame(Name alias) {
        this(alias, ANSWERSINTERVALSGAME);
    }

    /**
     * Create a <code>db.AnswersIntervalsGame</code> table reference
     */
    public Answersintervalsgame() {
        this(DSL.name("AnswersIntervalsGame"), null);
    }

    public <O extends Record> Answersintervalsgame(Table<O> child, ForeignKey<O, AnswersintervalsgameRecord> key) {
        super(child, key, ANSWERSINTERVALSGAME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB;
    }

    @Override
    public UniqueKey<AnswersintervalsgameRecord> getPrimaryKey() {
        return Keys.KEY_ANSWERSINTERVALSGAME_PRIMARY;
    }

    @Override
    public Answersintervalsgame as(String alias) {
        return new Answersintervalsgame(DSL.name(alias), this);
    }

    @Override
    public Answersintervalsgame as(Name alias) {
        return new Answersintervalsgame(alias, this);
    }

    @Override
    public Answersintervalsgame as(Table<?> alias) {
        return new Answersintervalsgame(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Answersintervalsgame rename(String name) {
        return new Answersintervalsgame(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Answersintervalsgame rename(Name name) {
        return new Answersintervalsgame(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Answersintervalsgame rename(Table<?> name) {
        return new Answersintervalsgame(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
