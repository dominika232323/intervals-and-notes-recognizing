/*
 * This file is generated by jOOQ.
 */
package com.example.demo.jooq.tables;


import com.example.demo.jooq.Db;
import com.example.demo.jooq.Indexes;
import com.example.demo.jooq.Keys;
import com.example.demo.jooq.tables.records.IntervalsgameRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Intervalsgame extends TableImpl<IntervalsgameRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>db.IntervalsGame</code>
     */
    public static final Intervalsgame INTERVALSGAME = new Intervalsgame();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IntervalsgameRecord> getRecordType() {
        return IntervalsgameRecord.class;
    }

    /**
     * The column <code>db.IntervalsGame.intervalsGameID</code>.
     */
    public final TableField<IntervalsgameRecord, Integer> INTERVALSGAMEID = createField(DSL.name("intervalsGameID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>db.IntervalsGame.intervalLevelID</code>.
     */
    public final TableField<IntervalsgameRecord, Integer> INTERVALLEVELID = createField(DSL.name("intervalLevelID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>db.IntervalsGame.userID</code>.
     */
    public final TableField<IntervalsgameRecord, Integer> USERID = createField(DSL.name("userID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>db.IntervalsGame.datePlayed</code>.
     */
    public final TableField<IntervalsgameRecord, LocalDate> DATEPLAYED = createField(DSL.name("datePlayed"), SQLDataType.LOCALDATE, this, "");

    private Intervalsgame(Name alias, Table<IntervalsgameRecord> aliased) {
        this(alias, aliased, null);
    }

    private Intervalsgame(Name alias, Table<IntervalsgameRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>db.IntervalsGame</code> table reference
     */
    public Intervalsgame(String alias) {
        this(DSL.name(alias), INTERVALSGAME);
    }

    /**
     * Create an aliased <code>db.IntervalsGame</code> table reference
     */
    public Intervalsgame(Name alias) {
        this(alias, INTERVALSGAME);
    }

    /**
     * Create a <code>db.IntervalsGame</code> table reference
     */
    public Intervalsgame() {
        this(DSL.name("IntervalsGame"), null);
    }

    public <O extends Record> Intervalsgame(Table<O> child, ForeignKey<O, IntervalsgameRecord> key) {
        super(child, key, INTERVALSGAME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.INTERVALSGAME_INTERVALLEVELID, Indexes.INTERVALSGAME_USERID);
    }

    @Override
    public UniqueKey<IntervalsgameRecord> getPrimaryKey() {
        return Keys.KEY_INTERVALSGAME_PRIMARY;
    }

    @Override
    public List<ForeignKey<IntervalsgameRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INTERVALSGAME_IBFK_1, Keys.INTERVALSGAME_IBFK_2);
    }

    private transient Levelintervals _levelintervals;
    private transient Users _users;

    /**
     * Get the implicit join path to the <code>db.LevelIntervals</code> table.
     */
    public Levelintervals levelintervals() {
        if (_levelintervals == null)
            _levelintervals = new Levelintervals(this, Keys.INTERVALSGAME_IBFK_1);

        return _levelintervals;
    }

    /**
     * Get the implicit join path to the <code>db.Users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.INTERVALSGAME_IBFK_2);

        return _users;
    }

    @Override
    public Intervalsgame as(String alias) {
        return new Intervalsgame(DSL.name(alias), this);
    }

    @Override
    public Intervalsgame as(Name alias) {
        return new Intervalsgame(alias, this);
    }

    @Override
    public Intervalsgame as(Table<?> alias) {
        return new Intervalsgame(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Intervalsgame rename(String name) {
        return new Intervalsgame(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Intervalsgame rename(Name name) {
        return new Intervalsgame(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Intervalsgame rename(Table<?> name) {
        return new Intervalsgame(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, LocalDate> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super LocalDate, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super LocalDate, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
