/*
 * This file is generated by jOOQ.
 */
package com.example.demo.jooq.tables.records;


import com.example.demo.jooq.tables.Levelnotes;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LevelnotesRecord extends UpdatableRecordImpl<LevelnotesRecord> implements Record8<Integer, Integer, String, Integer, Integer, Integer, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>db.LevelNotes.levelID</code>.
     */
    public void setLevelid(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>db.LevelNotes.levelID</code>.
     */
    public Integer getLevelid() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>db.LevelNotes.userID</code>.
     */
    public void setUserid(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>db.LevelNotes.userID</code>.
     */
    public Integer getUserid() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>db.LevelNotes.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>db.LevelNotes.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>db.LevelNotes.lowerNoteBound</code>.
     */
    public void setLowernotebound(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>db.LevelNotes.lowerNoteBound</code>.
     */
    public Integer getLowernotebound() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>db.LevelNotes.higherNoteBound</code>.
     */
    public void setHighernotebound(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>db.LevelNotes.higherNoteBound</code>.
     */
    public Integer getHighernotebound() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>db.LevelNotes.startingWave</code>.
     */
    public void setStartingwave(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>db.LevelNotes.startingWave</code>.
     */
    public Integer getStartingwave() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>db.LevelNotes.endingWave</code>.
     */
    public void setEndingwave(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>db.LevelNotes.endingWave</code>.
     */
    public Integer getEndingwave() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>db.LevelNotes.repetitionsNextWave</code>.
     */
    public void setRepetitionsnextwave(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>db.LevelNotes.repetitionsNextWave</code>.
     */
    public Integer getRepetitionsnextwave() {
        return (Integer) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, String, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Integer, Integer, String, Integer, Integer, Integer, Integer, Integer> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Levelnotes.LEVELNOTES.LEVELID;
    }

    @Override
    public Field<Integer> field2() {
        return Levelnotes.LEVELNOTES.USERID;
    }

    @Override
    public Field<String> field3() {
        return Levelnotes.LEVELNOTES.NAME;
    }

    @Override
    public Field<Integer> field4() {
        return Levelnotes.LEVELNOTES.LOWERNOTEBOUND;
    }

    @Override
    public Field<Integer> field5() {
        return Levelnotes.LEVELNOTES.HIGHERNOTEBOUND;
    }

    @Override
    public Field<Integer> field6() {
        return Levelnotes.LEVELNOTES.STARTINGWAVE;
    }

    @Override
    public Field<Integer> field7() {
        return Levelnotes.LEVELNOTES.ENDINGWAVE;
    }

    @Override
    public Field<Integer> field8() {
        return Levelnotes.LEVELNOTES.REPETITIONSNEXTWAVE;
    }

    @Override
    public Integer component1() {
        return getLevelid();
    }

    @Override
    public Integer component2() {
        return getUserid();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public Integer component4() {
        return getLowernotebound();
    }

    @Override
    public Integer component5() {
        return getHighernotebound();
    }

    @Override
    public Integer component6() {
        return getStartingwave();
    }

    @Override
    public Integer component7() {
        return getEndingwave();
    }

    @Override
    public Integer component8() {
        return getRepetitionsnextwave();
    }

    @Override
    public Integer value1() {
        return getLevelid();
    }

    @Override
    public Integer value2() {
        return getUserid();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public Integer value4() {
        return getLowernotebound();
    }

    @Override
    public Integer value5() {
        return getHighernotebound();
    }

    @Override
    public Integer value6() {
        return getStartingwave();
    }

    @Override
    public Integer value7() {
        return getEndingwave();
    }

    @Override
    public Integer value8() {
        return getRepetitionsnextwave();
    }

    @Override
    public LevelnotesRecord value1(Integer value) {
        setLevelid(value);
        return this;
    }

    @Override
    public LevelnotesRecord value2(Integer value) {
        setUserid(value);
        return this;
    }

    @Override
    public LevelnotesRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public LevelnotesRecord value4(Integer value) {
        setLowernotebound(value);
        return this;
    }

    @Override
    public LevelnotesRecord value5(Integer value) {
        setHighernotebound(value);
        return this;
    }

    @Override
    public LevelnotesRecord value6(Integer value) {
        setStartingwave(value);
        return this;
    }

    @Override
    public LevelnotesRecord value7(Integer value) {
        setEndingwave(value);
        return this;
    }

    @Override
    public LevelnotesRecord value8(Integer value) {
        setRepetitionsnextwave(value);
        return this;
    }

    @Override
    public LevelnotesRecord values(Integer value1, Integer value2, String value3, Integer value4, Integer value5, Integer value6, Integer value7, Integer value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LevelnotesRecord
     */
    public LevelnotesRecord() {
        super(Levelnotes.LEVELNOTES);
    }

    /**
     * Create a detached, initialised LevelnotesRecord
     */
    public LevelnotesRecord(Integer levelid, Integer userid, String name, Integer lowernotebound, Integer highernotebound, Integer startingwave, Integer endingwave, Integer repetitionsnextwave) {
        super(Levelnotes.LEVELNOTES);

        setLevelid(levelid);
        setUserid(userid);
        setName(name);
        setLowernotebound(lowernotebound);
        setHighernotebound(highernotebound);
        setStartingwave(startingwave);
        setEndingwave(endingwave);
        setRepetitionsnextwave(repetitionsnextwave);
    }
}
